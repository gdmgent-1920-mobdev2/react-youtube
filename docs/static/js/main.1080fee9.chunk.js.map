{"version":3,"sources":["app/config/index.js","app/context/YoutubeApiContext.js","app/components/YoutubeSearchForm.js","app/components/YoutubeSearchResultsItem.js","app/components/YoutubeSearchResults.js","app/App.js","app/index.js","serviceWorker.js","index.js"],"names":["youtubeDataApi","process","YoutubeApiContext","createContext","YoutubeApiProvider","children","useState","searchResults","setSearchResults","YOUTUBE_API_SEARCH","search","q","a","url","fetch","response","json","jsonData","Provider","value","YoutubeSearchForm","searchString","setSearchString","useContext","className","onSubmit","ev","preventDefault","type","required","placeholder","onChange","target","YoutubeSearchResultsItem","item","videoClicked","onClick","snippet","title","src","thumbnails","high","YoutubeSearchResults","items","map","key","id","videoId","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAAaA,EACHC,0CADGD,EAEAC,+CCEPC,EAAoBC,0BAEpBC,EAAoB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACMC,mBAAS,IADf,mBAC9BC,EAD8B,KACfC,EADe,KAGhCC,EAAkB,UAAMT,EAAN,gBAAsCA,EAAtC,kCAElBU,EAAM,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACLC,EADK,UACIJ,GADJ,OACyBE,GADzB,SAEYG,MAAMD,GAFlB,cAELE,EAFK,gBAGYA,EAASC,OAHrB,OAGLC,EAHK,OAIXT,EAAiBS,GAJN,2CAAH,sDAOZ,OACI,kBAACf,EAAkBgB,SAAnB,CAA4BC,MAAO,CAACT,SAAQH,kBACvCF,I,OCEEe,G,MAjBW,SAAC,GAAQ,qBACWd,mBAAS,IADrB,mBACtBe,EADsB,KACRC,EADQ,KAEtBZ,EAAWa,qBAAWrB,GAAtBQ,OAOR,OACI,0BAAMc,UAAU,sBAAsBC,SANrB,SAACC,GAClBA,EAAGC,iBACHjB,EAAOW,KAKH,2BAAOO,KAAK,OAAOC,UAAQ,EAACC,YAAY,uBAAuBC,SAAU,SAACL,GAAD,OAAQJ,EAAgBI,EAAGM,OAAOb,QAAQA,MAAOE,IAC1H,2BAAOO,KAAK,SAAST,MAAM,cCFxBc,G,MAXkB,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aACrC,OACI,wBAAIX,UAAU,+BAA+BY,QAASD,GAClD,4BAAKD,EAAKG,QAAQC,OAClB,6BAASd,UAAU,WACf,yBAAKe,IAAKL,EAAKG,QAAQG,WAAWC,KAAK5B,UCqBxC6B,G,MAxBc,SAAC,GAAQ,mBAC1BnC,EAAkBgB,qBAAWrB,GAA7BK,cAMR,OACI,yBAAKiB,UAAU,0BACX,4BAEMjB,EAAcoC,MAChBpC,EAAcoC,MAAMC,KAAI,SAACV,GACrB,OACI,kBAAC,EAAD,CAA0BW,IAAKX,EAAKY,GAAGC,QAASb,KAAMA,EAAMC,aAAc,kBAXlEY,EAW2Fb,EAAKY,GAAGC,aAV3HC,QAAQC,IAAR,kCAAuCF,IADhB,IAACA,QAchB,kBAAC,WAAD,U,MCJDG,ICjBAA,EDKf,WAEE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SEDY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.1080fee9.chunk.js","sourcesContent":["export const youtubeDataApi = {\r\n  apiKey: process.env.REACT_APP_YOUTUBE_DATAAPI_KEY,\r\n  searchUrl: process.env.REACT_APP_YOUTUBE_DATAAPI_SEARCHURL,\r\n};","import React, { createContext, useEffect, useState } from 'react';\r\n\r\nimport { youtubeDataApi } from '../config';\r\n\r\nconst YoutubeApiContext = createContext();\r\n\r\nconst YoutubeApiProvider= ({children}) => { \r\n    const [ searchResults, setSearchResults ] = useState([]);\r\n\r\n    const YOUTUBE_API_SEARCH = `${youtubeDataApi.searchUrl}?key=${youtubeDataApi.apiKey}&part=snippet&maxResults=20&q=`;\r\n\r\n    const search = async (q) => {\r\n        const url = `${YOUTUBE_API_SEARCH}${q}`;\r\n        const response = await fetch(url);\r\n        const jsonData = await response.json();\r\n        setSearchResults(jsonData);\r\n    }   \r\n\r\n    return (\r\n        <YoutubeApiContext.Provider value={{search, searchResults}}>\r\n            {children}\r\n        </YoutubeApiContext.Provider>\r\n    )\r\n};\r\n\r\nexport {\r\n    YoutubeApiContext,\r\n    YoutubeApiProvider,\r\n}","import React, { useContext, useState } from 'react';\r\nimport { YoutubeApiContext } from '../context';\r\n\r\nimport './YoutubeSearchForm.css';\r\n\r\nconst YoutubeSearchForm = ({}) => {\r\n    const [ searchString, setSearchString ] = useState('');\r\n    const { search } = useContext(YoutubeApiContext);\r\n\r\n    const handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        search(searchString);\r\n    };\r\n\r\n    return (\r\n        <form className=\"youtube-search-form\" onSubmit={handleSubmit}>\r\n            <input type=\"text\" required placeholder=\"write your search...\" onChange={(ev) => setSearchString(ev.target.value)} value={searchString} />\r\n            <input type=\"submit\" value=\"Search\" />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default YoutubeSearchForm;","import React from 'react';\r\n\r\nimport './YoutubeSearchResultsItem.css';\r\n\r\nconst YoutubeSearchResultsItem = ({item, videoClicked}) => {\r\n    return (\r\n        <li className=\"youtube-search-results__item\" onClick={videoClicked}>\r\n            <h1>{item.snippet.title}</h1>\r\n            <picture className=\"picture\">\r\n                <img src={item.snippet.thumbnails.high.url}/>\r\n            </picture>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default YoutubeSearchResultsItem;","import React, { useContext, useState, Fragment } from 'react';\r\nimport { YoutubeApiContext } from '../context';\r\nimport YoutubeSearchResultsItem from './YoutubeSearchResultsItem';\r\n\r\nimport './YoutubeSearchResults.css';\r\n\r\nconst YoutubeSearchResults = ({}) => {\r\n    const { searchResults } = useContext(YoutubeApiContext);\r\n\r\n    const handleVideoClicked = (videoId)  => {\r\n        console.log(`VIDEO CLICKED WIDTH ID: ${videoId}`);\r\n    };\r\n\r\n    return (\r\n        <div className=\"youtube-search-results\">\r\n            <ul>\r\n            {\r\n                !!searchResults.items ? \r\n                searchResults.items.map((item) => {\r\n                    return (\r\n                        <YoutubeSearchResultsItem key={item.id.videoId} item={item} videoClicked={() => handleVideoClicked(item.id.videoId)} />\r\n                    )\r\n                }) : \r\n                <Fragment></Fragment>\r\n            }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default YoutubeSearchResults;","import React, { useContext } from 'react';\r\n\r\nimport { YoutubeApiProvider } from './context';\r\nimport { YoutubeSearchForm, YoutubeSearchResults } from './components';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <YoutubeApiProvider>\r\n        <YoutubeSearchForm />\r\n        <YoutubeSearchResults />\r\n      </YoutubeApiProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}